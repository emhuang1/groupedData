se.pg
if (numCov > 1){
mod.Laplace <- tryCatch(optim(coefs.pg, laplacePL, method = "BFGS", data = data, control = list(fnscale=-1), hessian = FALSE),
error = function(e){
nmk(coefs.pg, laplacePL, control = list(maximize = TRUE), data = data)
})
coefs.Laplace <- mod.Laplace$par
numHess.Laplace <- hessian(func = laplacePL, x = coefs.Laplace, method = "Richardson", data = data)
se.Laplace <- sqrt(diag(solve(-numHess.Laplace)))
if (sum(is.nan(se.Laplace))>0){
mod.Laplace <- optim(coefs.pg, laplacePL, method = "BFGS", data = data, control = list(fnscale=-1), hessian = TRUE)
coefs.Laplace <- mod.Laplace$par
se.Laplace <- sqrt(diag(solve(-mod.Laplace$hessian)))
}
} else {
mod.Laplace <- optimize(laplacePL, interval = c(-10,10), maximum = TRUE, data = data)
coefs.Laplace <- mod.Laplace$maximum
numHess.Laplace <- hessian(func = laplacePL, x = coefs.Laplace, method = "Richardson", data = data)
se.Laplace <- sqrt(diag(solve(-numHess.Laplace)))
if (is.nan(se.Laplace)){
mod.Laplace <- optim(coefs.pg, laplacePL, method = "BFGS", data = data, control = list(fnscale=-1), hessian = TRUE)
coefs.Laplace <- mod.Laplace$par
se.Laplace <- sqrt(diag(solve(-mod.Laplace$hessian)))
}
}
se.Laplace
coefs.Laplace
head(data)
data <- samp
xnam <- names(data)[3:ncol(data)]
fmla <- as.formula(paste("Surv(V,delta) ~ ", paste(xnam, collapse= "+")))
numCov <- ncol(data) - 2
n <- nrow(data)
failureVisits <- sort(unique(data$V[data$delta == 1])) ##get the follow-up visits where failures are observed
ek <- unname(with(data,table(V, delta))[,2])
if (sum(ek == 0)>0){
print(paste("Simulation",k,"PG: zero failures at some visit."))
}
followup_visits <- sort(unique(data$V))
Nfollowup <- length(followup_visits)
dat <- data.frame(id = 1:nrow(data), data) ##dat will be data in long format
dat$V <- as.numeric(as.factor(dat$V))
seqvar <- 1:dat$V[1] ##will define as in Jenkins STB
for(i in 2:nrow(dat)){
seqvar <- c(seqvar,1:dat$V[i])
}
dat <- dat[rep(1:nrow(dat),times=dat$V),]
dat$seqvar <- seqvar
dat$y.ij <- 0 ##we will define y.ij as in Jenkin's STB
dat$y.ij[dat$delta == 1 & dat$seqvar == dat$V] <- 1
dat <- dat[,-c(2,3)] ##remove delta and V columns
modPG <-  optim(c(rep(0, numCov), log(-log(1-(1+ek)/n))), PGloglik, gr = PGgradient, method="BFGS", data=dat, control=list(fnscale=-1), hessian = FALSE)
coefs.pg <-  modPG$par
se.pg <- sqrt(diag(solve(-PGhessian(dat, coefs.pg))))
coefs.pg <- coefs.pg[1:numCov]
se.pg <- se.pg[1:numCov]
laplaceFun <- function(x, a.j){
val <- rep(0,length(x))
for (i in 1:length(x)){
val[i] <- sum(a.j/(exp(a.j*x[i])-1)) - 1
}
return(val)
}
laplacePL <- function(Beta, data){
logPL <- 0
for (v in 1:length(failureVisits)){
##consider only those who are at risk
riskSet <- subset(data, V >= failureVisits[v])
##compute every person's risk score
riskSet$r <- exp(as.matrix(riskSet[,3:(2+numCov)])%*%Beta)
#people who failed at visit v
riskSet.top <- subset(riskSet, V == failureVisits[v] & delta == 1)
d <- nrow(riskSet.top) ##number of people who failed at visit v
#the people who didn't fail
riskSet.bottom <- subset(riskSet, !(V == failureVisits[v] & delta == 1))
##order so that the first d rows are the people who failed, the following
##rows are the people in the risk set who didn't fail
riskSet <- rbind(riskSet.top, riskSet.bottom)
##add the risk scores of the people in the risk set who didn't fail
sumRisk <- sum(riskSet$r[(d+1):nrow(riskSet)])
if (d > 1){
##vector of risk scores of people who failed divided by sum of risk scores of people
##who didn't fail
a.j <- riskSet$r[1:d]/sumRisk
##to prevent exp(a.j*x) - 1 from being 0
a.j[a.j < 1e-16] <- 1e-16
##compute lower and upper bounds for tStar
res <- laplaceFun(1:d, a.j)
lowerLim <- max(which(res > 0))
upperLim <- min(which(res < 0))
##compute tStar
tStar <- uniroot(f = laplaceFun, interval = c(lowerLim,upperLim), extendInt = "no", a.j = a.j)$root
sigmaStar <- sum(a.j^2 * exp(a.j*tStar)/(exp(a.j*tStar) - 1)^2)
logPL <- logPL - 1/2*log(sigmaStar) + sum(log(1-exp(-a.j*tStar))) - tStar + pnorm(0, mean = tStar, sd = 1/sqrt(sigmaStar), lower.tail = FALSE, log.p = TRUE)
} else {
logPL <- logPL + log(riskSet$r[1]) - log(riskSet$r[1]+sumRisk)
}
}
return(logPL)
}
if (numCov > 1){
mod.Laplace <- tryCatch(optim(coefs.pg, laplacePL, method = "BFGS", data = data, control = list(fnscale=-1), hessian = FALSE),
error = function(e){
nmk(coefs.pg, laplacePL, control = list(maximize = TRUE), data = data)
})
coefs.Laplace <- mod.Laplace$par
numHess.Laplace <- hessian(func = laplacePL, x = coefs.Laplace, method = "Richardson", data = data)
se.Laplace <- sqrt(diag(solve(-numHess.Laplace)))
if (sum(is.nan(se.Laplace))>0){
mod.Laplace <- optim(coefs.pg, laplacePL, method = "BFGS", data = data, control = list(fnscale=-1), hessian = TRUE)
coefs.Laplace <- mod.Laplace$par
se.Laplace <- sqrt(diag(solve(-mod.Laplace$hessian)))
}
} else {
mod.Laplace <- optimize(laplacePL, interval = c(-10,10), maximum = TRUE, data = data)
coefs.Laplace <- mod.Laplace$maximum
numHess.Laplace <- hessian(func = laplacePL, x = coefs.Laplace, method = "Richardson", data = data)
se.Laplace <- sqrt(diag(solve(-numHess.Laplace)))
if (is.nan(se.Laplace)){
mod.Laplace <- optim(coefs.pg, laplacePL, method = "BFGS", data = data, control = list(fnscale=-1), hessian = TRUE)
coefs.Laplace <- mod.Laplace$par
se.Laplace <- sqrt(diag(solve(-mod.Laplace$hessian)))
}
}
mod.Laplace <- optim(coefs.pg, laplacePL, method = "Nelder-Mead", data = data, control = list(fnscale=-1), hessian = TRUE)
mod.Laplace <- optim(coefs.pg, laplacePL, method = "Nelder-Mead", data = data, control = list(fnscale=-1), hessian = FALSE)
mod.Laplace
coefs.Laplace <- mod.Laplace$par
numHess.Laplace <- hessian(func = laplacePL, x = coefs.Laplace, method = "Richardson", data = data)
numHess.Laplace
se.Laplace <- sqrt(diag(solve(-numHess.Laplace)))
se.Laplace
coefs.Laplace
numHess.Laplace <- hessian(func = laplacePL, x = c(coefs.Laplace + 1e-10), method = "Richardson", data = data)
numHess.Laplace
numHess.Laplace <- hessian(func = laplacePL, x = (coefs.Laplace) + 1e-10), method = "Richardson", data = data)
numHess.Laplace <- hessian(func = laplacePL, x = (coefs.Laplace) + 1e-10, method = "Richardson", data = data)
numHess.Laplace
numHess.Laplace <- hessian(func = laplacePL, x = (coefs.Laplace) + 1e-5, method = "Richardson", data = data)
numHess.Laplace
numHess.Laplace <- hessian(func = laplacePL, x = (coefs.Laplace) + 1e-2, method = "Richardson", data = data)
numHess.Laplace
numHess.Laplace <- hessian(func = laplacePL, x = (coefs.Laplace) + 1e-1, method = "Richardson", data = data)
numHess.Laplace
numHess.Laplace <- jacobian(func = laplacePL, x = (coefs.Laplace) + 1e-1, method = "Richardson", data = data)
numHess.Laplace
numHess.Laplace <- jacobian(func = laplacePL, x = (coefs.Laplace), method = "Richardson", data = data)
numHess.Laplace
factorial(5)
factorial(6)
table(samp$V, samp$delta)
permnt(1:5)
library(combinat)
install.packages("combinat")
factorial(7)
factorial(6)
factorial(5)
permnt(1:4)
library(combinat)
permnt(1:4)
permn(1:4)
permnt(1:5)
permn(1:5)
permn(1:6)
matrix(permn(1:6))
factorial(7)
k <- 10
k <- 1
set.seed(seeds[k])
samp <- data[sample(1:nrow(data), size = n, replace = TRUE),]
table(samp$V, samp$delta)
k <- 2
set.seed(seeds[k])
samp <- data[sample(1:nrow(data), size = n, replace = TRUE),]
table(samp$V, samp$delta)
k <- 5
set.seed(seeds[k])
samp <- data[sample(1:nrow(data), size = n, replace = TRUE),]
table(samp$V, samp$delta)
k <- 6
set.seed(seeds[k])
samp <- data[sample(1:nrow(data), size = n, replace = TRUE),]
table(samp$V, samp$delta)
data <- samp
xnam <- names(data)[3:ncol(data)]
fmla <- as.formula(paste("Surv(V,delta) ~ ", paste(xnam, collapse= "+")))
numCov <- ncol(data) - 2
n <- nrow(data)
failureVisits <- sort(unique(data$V[data$delta == 1])) ##get the follow-up visits where failures are observed
mod.efron <- coxph(fmla, ties = "efron", data=data)
coefs.efron <- summary(mod.efron)$coef[,1]
se.efron <- summary(mod.efron)$coef[,3]
PGloglik <- function(x, data){
k <- Nfollowup
p <- length(x) - k
pterm <- rep(0, nrow(data))
for (i in 1:p) pterm <- pterm + (data[,i+1] * x[i]) ##first column of data is id
sterm <- rep(0, nrow(data))
for (i in 1:k) sterm <- sterm + (data$seqvar == i) * x[i+p]
h.jx <- 1 - exp(-exp(pterm + sterm))
val <-  sum(data$y.ij*log(h.jx) + (1-data$y.ij)*log(1-h.jx))
return(val)
}
PGgradient <- function(x, data){
grad <- rep(NA, length(x))
k <- Nfollowup
p <- length(x) - k
pterm <- rep(0, nrow(data))
for (i in 1:p) pterm <- pterm + (data[,i+1] * x[i]) ##first column is id
sterm <- rep(0, nrow(data))
for (i in 1:k) sterm <- sterm + (data$seqvar == i) * x[i+p]
alpha.ij <- exp(pterm + sterm)
h.ij <- 1 - exp(-alpha.ij)
for (i in 1:p) grad[i] <- sum(data$y.ij*exp(-alpha.ij)*alpha.ij/(h.ij)*data[,i+1] - (1-data$y.ij)*exp(-alpha.ij)*alpha.ij/(1-h.ij)*data[,i+1])
for (i in 1:k) grad[p+i] <- sum((data$y.ij * exp(-alpha.ij)*alpha.ij/h.ij - (1-data$y.ij)*exp(-alpha.ij)*alpha.ij/(1-h.ij))*(data$seqvar == i))
return(grad)
}
PGhessian <- function(data, coefs.pg){
hessian <- matrix(NA, nrow = Nfollowup + numCov, ncol = Nfollowup + numCov)
pterm <- rep(0, nrow(data))
for (i in 1:numCov) pterm <- pterm + (data[,i+1] * coefs.pg[i]) ##first column is id
sterm <- rep(0, nrow(data))
for (i in 1:Nfollowup) sterm <- sterm + (data$seqvar == i) * coefs.pg[i+numCov]
alpha.ij <- exp(pterm + sterm)
h.ij <- 1 - exp(-alpha.ij)
x.ij <- 1/(exp(alpha.ij)-1)-alpha.ij*exp(alpha.ij)/(exp(alpha.ij)-1)^2
for (i in 1:numCov){
for (j in 1:numCov){
hessian[i,j] <- sum(data$y.ij*data[,1+i]*data[,1+j]*alpha.ij*x.ij-(1-data$y.ij)*data[,1+i]*data[,1+j]*alpha.ij)
}
}
for (i in 1:Nfollowup){
for (j in 1:Nfollowup){
if (i != j) {
hessian[numCov+i,numCov+j] <- 0
} else {
hessian[numCov+i,numCov+i]<-sum((data$seqvar==i) * (data$y.ij*alpha.ij*x.ij-alpha.ij*(1-data$y.ij)))
}
}
}
for (i in 1:numCov){
for (j in 1:Nfollowup){
hessian[i,j+numCov] <- hessian[j+numCov, i] <- sum((data$seqvar==j)*(data$y.ij*alpha.ij*data[,1+i]*x.ij-(1-data$y.ij)*alpha.ij*data[,1+i]))
}
}
return(hessian)
}
ek <- unname(with(data,table(V, delta))[,2])
if (sum(ek == 0)>0){
print(paste("Simulation",k,"PG: zero failures at some visit."))
}
followup_visits <- sort(unique(data$V))
Nfollowup <- length(followup_visits)
dat <- data.frame(id = 1:nrow(data), data) ##dat will be data in long format
dat$V <- as.numeric(as.factor(dat$V))
seqvar <- 1:dat$V[1] ##will define as in Jenkins STB
for(i in 2:nrow(dat)){
seqvar <- c(seqvar,1:dat$V[i])
}
dat <- dat[rep(1:nrow(dat),times=dat$V),]
dat$seqvar <- seqvar
dat$y.ij <- 0 ##we will define y.ij as in Jenkin's STB
dat$y.ij[dat$delta == 1 & dat$seqvar == dat$V] <- 1
dat <- dat[,-c(2,3)] ##remove delta and V columns
modPG <-  optim(c(rep(0, numCov), log(-log(1-(1+ek)/n))), PGloglik, gr = PGgradient, method="BFGS", data=dat, control=list(fnscale=-1), hessian = FALSE)
coefs.pg <-  modPG$par
se.pg <- sqrt(diag(solve(-PGhessian(dat, coefs.pg))))
coefs.pg <- coefs.pg[1:numCov]
se.pg <- se.pg[1:numCov]
felixPL <- function(Beta, data){
logPL <- 0
data$r <- exp(as.matrix(data[,3:(2+numCov)])%*%Beta)
for (v in 1:length(failureVisits)){
riskSet <- subset(data, V >= failureVisits[v])
riskSet.top <- subset(riskSet, V == failureVisits[v] & delta == 1)
d <- nrow(riskSet.top)
riskSet.bottom <- subset(riskSet, !(V == failureVisits[v] & delta == 1))
riskSet <- rbind(riskSet.top, riskSet.bottom)
sumRisk <- sum(riskSet$r[(d+1):nrow(riskSet)])
logPL <- logPL + sum(log(1-exp(-riskSet$r[1:d]/sumRisk*(d+1))))
}
return(logPL)
}
laplaceFun <- function(x, a.j){
val <- rep(0,length(x))
for (i in 1:length(x)){
val[i] <- sum(a.j/(exp(a.j*x[i])-1)) - 1
}
return(val)
}
laplacePL <- function(Beta, data){
logPL <- 0
for (v in 1:length(failureVisits)){
##consider only those who are at risk
riskSet <- subset(data, V >= failureVisits[v])
##compute every person's risk score
riskSet$r <- exp(as.matrix(riskSet[,3:(2+numCov)])%*%Beta)
#people who failed at visit v
riskSet.top <- subset(riskSet, V == failureVisits[v] & delta == 1)
d <- nrow(riskSet.top) ##number of people who failed at visit v
#the people who didn't fail
riskSet.bottom <- subset(riskSet, !(V == failureVisits[v] & delta == 1))
##order so that the first d rows are the people who failed, the following
##rows are the people in the risk set who didn't fail
riskSet <- rbind(riskSet.top, riskSet.bottom)
##add the risk scores of the people in the risk set who didn't fail
sumRisk <- sum(riskSet$r[(d+1):nrow(riskSet)])
if (d > 1){
##vector of risk scores of people who failed divided by sum of risk scores of people
##who didn't fail
a.j <- riskSet$r[1:d]/sumRisk
##to prevent exp(a.j*x) - 1 from being 0
a.j[a.j < 1e-16] <- 1e-16
##compute lower and upper bounds for tStar
res <- laplaceFun(1:d, a.j)
lowerLim <- max(which(res > 0))
upperLim <- min(which(res < 0))
##compute tStar
tStar <- uniroot(f = laplaceFun, interval = c(lowerLim,upperLim), extendInt = "no", a.j = a.j)$root
sigmaStar <- sum(a.j^2 * exp(a.j*tStar)/(exp(a.j*tStar) - 1)^2)
logPL <- logPL - 1/2*log(sigmaStar) + sum(log(1-exp(-a.j*tStar))) - tStar + pnorm(0, mean = tStar, sd = 1/sqrt(sigmaStar), lower.tail = FALSE, log.p = TRUE)
} else {
logPL <- logPL + log(riskSet$r[1]) - log(riskSet$r[1]+sumRisk)
}
}
return(logPL)
}
if (numCov > 1){
mod.Laplace <- tryCatch(optim(coefs.pg, laplacePL, method = "BFGS", data = data, control = list(fnscale=-1), hessian = FALSE),
error = function(e){
nmk(coefs.pg, laplacePL, control = list(maximize = TRUE), data = data)
})
coefs.Laplace <- mod.Laplace$par
numHess.Laplace <- hessian(func = laplacePL, x = coefs.Laplace, method = "Richardson", data = data)
se.Laplace <- sqrt(diag(solve(-numHess.Laplace)))
if (sum(is.nan(se.Laplace))>0){
mod.Laplace <- optim(coefs.pg, laplacePL, method = "BFGS", data = data, control = list(fnscale=-1), hessian = TRUE)
coefs.Laplace <- mod.Laplace$par
se.Laplace <- sqrt(diag(solve(-mod.Laplace$hessian)))
}
} else {
mod.Laplace <- optimize(laplacePL, interval = c(-10,10), maximum = TRUE, data = data)
coefs.Laplace <- mod.Laplace$maximum
numHess.Laplace <- hessian(func = laplacePL, x = coefs.Laplace, method = "Richardson", data = data)
se.Laplace <- sqrt(diag(solve(-numHess.Laplace)))
if (is.nan(se.Laplace)){
mod.Laplace <- optim(coefs.pg, laplacePL, method = "BFGS", data = data, control = list(fnscale=-1), hessian = TRUE)
coefs.Laplace <- mod.Laplace$par
se.Laplace <- sqrt(diag(solve(-mod.Laplace$hessian)))
}
}
se.Laplace
table(data$V, data$delta)
rm(list=ls())
load("~/Dropbox/research/Ravi/paper/Simulations/CHS_frailty/results/n500.Rdata")
hist(nties[,1])
hist(nties[,2])
min(nties[,2])
min(nties[,1])
load("~/Dropbox/research/Ravi/paper/Simulations/SingleCovariate/varyBeta/results/Beta0_n200.Rdata")
min(nties[,1])
hist(nties[,1])
hist(nties[,2])
hist(nties[,3])
load("~/Dropbox/research/Ravi/paper/Simulations/SingleCovariate/varyBeta/results/Beta02_n200.Rdata")
hist(nties[,1])
hist(nties[,2])
hist(nties[,3])
load("~/Dropbox/research/Ravi/paper/Simulations/SingleCovariate/varyBeta/results/Beta10_n200.Rdata")
hist(nties[,3])
hist(nties[,2])
hist(nties[,1])
load("~/Dropbox/research/Ravi/paper/Simulations/SingleCovariate/varyBeta/results/Beta20_n200.Rdata")
hist(nties[,1])
hist(nties[,2])
hist(nties[,3])
rm(list=ls())
load("~/Dropbox/research/Ravi/paper/Simulations/CHS_frailty/code/n100.R")
load("~/Dropbox/research/Ravi/paper/Simulations/CHS_frailty/results/n500.Rdata")
rowSums(nties)
summary(rowSums(nties))
42/5
load("~/Dropbox/research/Ravi/paper/Simulations/CHS_frailty/results/n1000.Rdata")
summary(rowSums(nties))
97/5
load("~/Dropbox/research/Ravi/paper/Simulations/SingleCovariate/varyBeta/results/Beta0_n200.Rdata")
summary(rowSums(nties))
load("~/Dropbox/research/Ravi/paper/Simulations/SingleCovariate/varyBeta/results/Beta0_n500.Rdata")
summary(rowSums(nties))
load("~/Dropbox/research/Ravi/paper/Simulations/SingleCovariate/varyBeta/results/Beta10_n200.Rdata")
summary(rowSums(nties))
load("~/Dropbox/research/Ravi/paper/Simulations/SingleCovariate/varyBeta/results/Beta20_n200.Rdata")
summary(rowSums(nties))
load("~/Dropbox/research/Ravi/paper/Simulations/SingleCovariate/varyA/N500/results/a3.Rdata")
summary(rowSums(nties))
13/5
load("~/Dropbox/research/Ravi/paper/Simulations/SingleCovariate/varyA/N500/results/a15.Rdata")
summary(rowSums(nties))
rm(list=ls())
setwd("~/Dropbox/research/Ravi/paper/CHS_slowness")
data <- read.csv("slow_incident.csv")
head(data)
sum(is.na(data))
apply(data, 2, function(x){sum(is.na(x))})
nrow(data)
4011/5201
head(data$delta, data$"VADeaths")
head(data$delta, data$V)
data <- data.frame(delta = data$slowness,
V = data$evttime.years.,
gend01 = data$gend01,
agebl = data$agebl,
logIL6 = data$logIL6,
logTNFRI = data$logTNFRI,
height = data$height)
head(data$delta, data$V)
table(data$delta,data$V)
load("~/Dropbox/research/Ravi/paper/CHS_frailty/huang_main.csv")
rm(list=ls())
rm(list=ls())
setwd("/Users/emhuang/Dropbox/research/Ravi/paper/CHS_frailty")
load("baselineData.Rdata")
load("frail.Rdata")
data <- merge(baselineData, outcome, by = "idno")
rm(baselineData, outcome)
data$educ <- as.numeric(data$grade01 > 13)
table(data$grade01, data$educ, useNA = "ifany")
data$everSmoke <- as.numeric(data$smoke2 > 1)
table(data$everSmoke, data$smoke2, useNA = "ifany")
data <- data[complete.cases(data),]
nrow(data)
data$V = data$V - 2
data <- subset(data, !(V == 0))
data$age01 <- (data$age01-65)/10
iqr <- quantile(data$crpblorg, .75)-quantile(data$crpblorg, .25)
data$crpblorg <- (data$crpblorg)/iqr
data <- data.frame(delta = data$delta,
V = data$V,
age01 = data$age01,
educ = data$educ,
gend01 = data$gend01,
everSmoke = data$everSmoke,
crpblorg = data$crpblorg)
nrow(data)
table(data$delta, data$V)
head(data)
setwd("~/Dropbox/research/Ravi/paper/genericCode")
source("allCode.R")
result <- applyMethod(data)
result <- applyMethods(data)
result
coefs.efron <- result[1:5]
coefs.breslow <- result[6:10]
coefs.Laplace <- result[11:15]
coefs.Felix  <- result[16:20]
coefs.pg <- result[21:25]
se.efron <- result[26:30]
se.breslow <- result[31:35]
se.Laplace <- result[36:40]
se.Felix <- result[41:45]
se.pg <- result[46:50]
result <- cbind(coefs.Laplace, se.Laplace, coefs.Felix, se.Felix, coefs.efron, se.efron, coefs.breslow, se.breslow, coefs.pg, se.pg)
head(result)
library(xtable)
result <- xtable(result, align = "ccccccccccc")
digits(result) <- 4
print(result, include.rownames=FALSE)
rm(list=ls())
rm(list=ls())
setwd("/Users/emhuang/Dropbox/research/Ravi/paper/CHS_frailty")
load("baselineData.Rdata")
load("frail.Rdata")
data <- merge(baselineData, outcome, by = "idno")
rm(baselineData, outcome)
data$educ <- as.numeric(data$grade01 > 13)
table(data$grade01, data$educ, useNA = "ifany")
data$everSmoke <- as.numeric(data$smoke2 > 1)
table(data$everSmoke, data$smoke2, useNA = "ifany")
data <- data[complete.cases(data),]
nrow(data)
data$V = data$V - 2
data <- subset(data, !(V == 0))
data$age01 <- (data$age01-65)/10
iqr <- quantile(data$crpblorg, .75)-quantile(data$crpblorg, .25)
data$crpblorg <- (data$crpblorg)/iqr
data <- data.frame(delta = data$delta,
V = data$V,
age01 = data$age01,
educ = data$educ,
gend01 = data$gend01,
everSmoke = data$everSmoke,
crpblorg = data$crpblorg)
save(data, file = "data.Rdata")
setwd("~/Dropbox/research/Ravi/paper/genericCode")
source("allCode.R")
result <- applyMethods(data)
coefs.efron <- result[1:5]
coefs.breslow <- result[6:10]
coefs.Laplace <- result[11:15]
coefs.Felix  <- result[16:20]
coefs.pg <- result[21:25]
se.efron <- result[26:30]
se.breslow <- result[31:35]
se.Laplace <- result[36:40]
se.Felix <- result[41:45]
se.pg <- result[46:50]
result <- cbind(coefs.pg, se.pg, coefs.Laplace, se.Laplace, coefs.Felix, se.Felix, coefs.efron, se.efron, coefs.breslow, se.breslow)
library(xtable)
result <- xtable(result, align = "ccccccccccc")
digits(result) <- 4
print(result, include.rownames=FALSE)
head(data)
